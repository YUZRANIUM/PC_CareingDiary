// INFO ****************************************************
// FileName : 00_module.hsp
// Version : 0.3.2
// Date    : 2024/02/05
// Author  : YUZRANIUM（ゆずらにうむ）
// Twitter : https://twitter.com/YUZRANIUM
// Git Hub : https://github.com/YUZRANIUM/PC_CareingDiary
//**********************************************************
/* Description
このファイルは以降のスクリプトで使用する自作命令･関数やマクロ、
その他モジュール等を記述しています。
************************************************************/



//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#ifndef __my_boxf_mod__
	#define global __my_boxf_mod__


#module "my_boxf"


#deffunc local _my_boxf_init_
	; boxf用の算出座標
	pary@my_boxf = 0 : dim pary@my_boxf, 4
	return

	;=======================================================
	; 座標計算機能付きboxf
	;
	; myboxf x, y, w, h, mode1, mode2
	;
	;	[ int ] x, y  : 描画時のX, Y座標
	;	[ int ] w, h  : 描画領域のXサイズ, Yサイズ
	;	[ int ] mode1 : 領域確認用枠線フラグ (= 0)
	;	[ int ] mode2 : 基準点切替 (= 0, 0:カレントポジション / 1:中心)
	;
#deffunc myboxf int x, int y, int w, int h, int mode1, int mode2
	dim pary, 4

	if mode2 {pary(0) = (x - int(w / 2)), (y - int(h / 2)), (x + int(w / 2)), (y + int(h / 2))}
	else     {pary(0) = x, y, (x + w), (y + h)}

	if mode1 {rgbcolor 0x000000 : boxf (pary(0) - 1), (pary(1) - 1), (pary(2) + 1), (pary(3) + 1)}
	rgbcolor 0xFFFFFF : boxf pary(0), pary(1), pary(2), pary(3)
	return

	;=======================================================
	; 座標計算機能付きboxf (配列バージョン)
	;
	; myfeld drary, d2, mode1
	;
	;	[array] drary : redraw 描画範囲を格納した2次元配列
	;	[ int ] d2    : 描画範囲配列変数の第2次元要素 (描画グループ)
	;	[ int ] mode1 : 領域確認用枠線フラグ (= 0)
	;
	;	drary(d1, d2)
	;	d1 = 0, 1 : カレントポジション x, y
	;	d1 = 2, 3 : X, Yサイズ
	;
#deffunc myfeld array drary, int d2, int mode1
	dim pary, 4
	pary(0) = drary(0, d2), drary(1, d2), (drary(0, d2) + drary(2, d2)), (drary(1, d2) + drary(3, d2))

	if mode1 {rgbcolor 0x000000 : boxf (pary(0) - 1), (pary(1) - 1), (pary(2) + 1), (pary(3) + 1)}
	rgbcolor 0xFFFFFF : boxf pary(0), pary(1), pary(2), pary(3)
	return

	;=======================================================
	; myboxfの座標取得命令
	;
#deffunc mygetboxf array ary
	dim ary, 4
	ary(0) = pary(0), pary(1), pary(2), pary(3)
	return


#global // my_boxf
	;
	_my_boxf_init_@my_boxf
	;
	;
#endif // __my_boxf_mod__
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#ifndef _my_pc_mod_
	#define global _my_pc_mod_


#ifndef __USER32__
	#include "user32.as"
#endif

#ifndef __hsedsdk__
	#include "hsedsdk.as"
#endif


#ifndef __HSPDA__
	#use hspda
#endif



//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#module "my_pc_mod"


#ifndef __MY_WIN_CONST__


//タブ項目の文字列の長さに関わらずタブつまみの横幅をすべて同じサイズにします
	#const TCS_FIXEDWIDTH 0x400
//スタティックテキスト
//winobj "static", "表示するもの", <拡張ウィンドウスタイル>, <ウィンドウスタイル>, Xサイズ, Yサイズ
//<拡張ウィンドウスタイル> : 深い凹み
	#const WS_EX_WINDOWEDGE 0x200
//<ウィンドウスタイル>
	#const WS_BORDER     0x800000    //境界枠線
	#const WS_DISABLED   0x8000000   //無効
	#const WS_DLGFRAME   0x400000    //膨らみ
	#const SS_CENTER     0x1         //中央揃え
	#const SS_RIGHT      0x2         //右揃え
	#const SS_SUNKEN     0x1000      //浅い凹み
	#const SS_NOTIFY     0x00000100  // STN_CLICKEDメッセージを親ウィンドウに送らせる
	#const STN_CLICKED   0x00000000

	/***  メッセージID  ***/

	#const WS_VISIBLE      0x10000000
	#const WS_CHILD        0x40000000
	#const WM_NOTIFY       0x004E

	#const LVN_COLUMNCLICK 0xFFFFFF94

	#const TCM_ADJUSTRECT  0x1328
	#const TCM_INSERTITEM  0x1307
	#const TCM_GETCURSEL   0x130B
	#const TCM_SETCURSEL   0x130C

	#const TCN_SELCHANGE   0xFFFFFDD9

#endif // __MY_WIN_CONST__



	;===========================================================================
	;四半期判定
	;
	; my_season_chk month_, season_
	;
	; [ var ] month_  : 月を管理する変数
	; [ var ] season_ : 四半期を管理する変数
	;
#deffunc my_season_chk var month_, var season_
	; 四半期
	if      (01 <= month_) & (month_ <= 03) {season_ = 4}
	else:if (04 <= month_) & (month_ <= 06) {season_ = 1}
	else:if (07 <= month_) & (month_ <= 09) {season_ = 2}
	else:if (10 <= month_) & (month_ <= 12) {season_ = 3}
	return


	;===========================================================================
	;ゲーム内時間更新命令
	;
	; my_daytime_chk day_ary, cnt_var, flg_ary
	;
	; [array] day_ary : 日付管理変数
	; [ var ] cnt_var : 日付更新用カウンタ
	; [array] flg_ary : 日時更新フラグ
	;
#deffunc my_daytime_chk array day_ary, var cnt_var, array flg_ary, int mode, \
local prmchk

	if ((mode = 0) & (cnt_var > 59)) {cnt_var = 0 : day_ary(4)++}                    ; 時間

	if (day_ary.4 > 23) {day_ary.4 = 0 : day_ary(3)++ : flg_ary.0 = 1} else {return} ; 日付
	if (day_ary.3 > 31) {day_ary.3 = 1 : day_ary(2)++                }               ; 月
	if (day_ary.2 > 12) {day_ary.2 = 1 : day_ary(0)++ : flg_ary.2 = 1}               ; 年

	; 四半期
	my_season_chk day_ary(2), day_ary(1)
	prmchk = ((day_ary.2 = 1) | (day_ary.2 = 4) | (day_ary.2 = 7) | (day_ary.2 = 10))

	if (day_ary.3 = 1) & prmchk {flg_ary.1 = 1}
	return


	;===========================================================================
	; vsave短縮
	; %1 : ファイル名
	;
#deffunc mysave str file_name
	vsave_start
	vsave_put ltime@
	vsave_put saveID@
	vsave_put ontime@
	vsave_put setting@
	vsave_put userp@
	vsave_put dsta@
	vsave_put st@
	vsave_put gt@
	vsave_put unit_cnt@
	vsave_put motimono@
	vsave_put logmoni@
	vsave_put bfcpu@
	vsave_put bfgpu@
	vsave_put bfrom@
	vsave_put bfssd@
	vsave_put bffan@
	vsave_put bfpow@
	vsave_end file_name
	return


	;===========================================================================
	; gsel + objprm
	; G_prm win_id, p1, obj_id, prm
	;
#define global G_prm(%1, %2=0, %3, %4) gsel %1, %2 : objprm %3, %4


	;===========================================================================
	; SQLリストビュー昇降順切り替え命令
	;
	;	[array] lv_hwnd  : リストビューのオブジェクトハンドル
	;	[array] sql_ary  : SQLのデータ格納変数
	;	[array] dea_cnt  : 昇降順カウンタ用変数
	;	[array] qer_ary  : SQLクエリ文
	;	[array] col_ary  : カラムリスト
	;	[array] dea_ary  : 昇降順クエリ
	;	[ int ] colm_idx : カラムインデックス
	;	[ int ] part_idx : パーツID
	;
#deffunc col_ch array lv_hwnd, array sql_ary, array dea_cnt, array qer_ary, array col_ary, array dea_ary, int colm_idx, int part_idx

	sdim sql_ary, 2048
	dea_cnt(part_idx)++
	if (dea_cnt(part_idx) = 2) {dea_cnt(part_idx) = 0}

	sql_q qer_ary(part_idx) + col_ary(colm_idx) + dea_ary(dea_cnt(part_idx)), sql_ary
	dellv_@MyListView lv_hwnd(part_idx, 0), 2
	insqlitem lv_hwnd(part_idx, 0), sql_ary

	return


	;===========================================================================
	; HSPバージョン"beta文字"付き出力
	; p1 : __hspver__ もしくは hspver
	; hsedsdk.asをインクルードすること
	;
#defcfunc myhspver int p1, local res
	sdim res : hsed_cnvverstr p1
	res += refstr
	if (instr(res, 0, "b") != -1) {strrep res, "b", "beta"}
	return res


	;===========================================================================
	; RGB指定
	;
	;	[ int ] rgb_ : $000000形式のRGBコード (0xも可)
	;	[ int ] mode : (= 0, 0:rgbcolor / 1:objcolor / 2:両方)
	;
#deffunc Mycolor int rgb_, int mode, local r_, local g_, local b_

	r_ = (rgb_ & $FF) : g_ = ((rgb_ >> 8) & $FF) : b_ = ((rgb_ >> 16) & $FF)

	if      (mode = 0) {rgbcolor rgb_      }
	else:if (mode = 1) {objcolor r_, g_, b_}
	else:if (mode = 2) {rgbcolor rgb_ : objcolor r_, g_, b_}
	return


	;===========================================================================
	; マウスクリックに反応するオブジェクト
	;
	; p1        : 表示する文字列
	; x_, y_    : マウスが反応するXサイズ,Yサイズ
	; obj_hwnd  : オブジェクトハンドルを受け取る変数
	; win_stile : ウィンドウスタイル($1:中央揃え, $2:右揃え)
	;
#deffunc mylmb str p1, int x, int y, var obj_hwnd, int win_stile
	dim RECT, 4
	winobj "static", p1, , CHILD_VIS | SS_NOTIFY | win_stile, x, y
	obj_hwnd = objinfo(stat, 2)
	//スタティックテキスト上のカーソルをハンドカーソルに変更
	LoadCursor 0, 32649
	SetClassLong obj_hwnd, -12, stat
	return


	;===========================================================================
	; データスロット用ウィンドウオブジェクト設置
	;
	;	[array] obj_hwnd : mylmcのオブジェクトハンドル
	;	[ int ] x, y  : オブジェクトの設置座標   (x, y)
	;	[ int ] w, h  : オブジェクトの縦横サイズ (w, h)
	;	[ int ] d     : 枠線の太さ
	;	[array] color : 枠線の色 (RGB形式)
	;	[ int ] id    : データスロットID
	;
#deffunc data_slot array obj_hwnd, int x, int y, int w, int h, int d, array color_, int id

	; 枠線部分
	rgbcolor color_(0)
	boxf (x - d), (y - d), (x + w + d), (y + h + d)

	; 中身と背景
	rgbcolor color_(1)
	boxf x, y, (x + w), (y + h)

	; データスロットの名称表示
	pos (x + 5), (y + 5)
	rgbcolor color_(2)
	mes "Save Data " + id

	; ボタン部分
	pos (x +  75), (y + 48) : mylmb " LOAD ", 55, 25, obj_hwnd(0, id), WS_BORDER
	pos (x + 140), (y + 48) : mylmb " SAVE ", 55, 25, obj_hwnd(1, id), WS_BORDER

	return

	;===========================================================================
	;
#deffunc rm_init
	WakSize = ((ginfo(10) - ginfo(12)) / 2)
	TabSize = ((ginfo(11) - ginfo(13)) / 2) - 13
	return


	;===========================================================================
	;
#defcfunc musx
	return (ginfo(0) - ginfo(4) - WakSize)


	;===========================================================================
	;
#defcfunc musy
	return (ginfo(1) - ginfo(5) - TabSize)


	;===========================================================================
	;
#define global ctype comp_musxy(%1,%2,%3,%4) (%1 <= musx()) & (musx() <= %2) & (%3 <= musy()) & (musy() <= %4)



//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#global // my_pc_mod

#endif //_my_pc_mod_
